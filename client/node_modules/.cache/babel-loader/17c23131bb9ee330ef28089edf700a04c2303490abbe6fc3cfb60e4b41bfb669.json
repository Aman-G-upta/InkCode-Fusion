{"ast":null,"code":"var _jsxFileName = \"/Users/madhavgoswami/Coding/Projects/InkCode-Fusion/client/src/components/Editor.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport React from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { python } from \"@codemirror/lang-python\";\nimport { initSocket } from \"../socket\";\nimport ACTIONS from \"../Actions\";\nimport { Navigate, useLocation, useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Editor = () => {\n  _s();\n  // Ref to hold the Socket.io connection\n  const socketRef = useRef(null);\n  const location = useLocation();\n  const reactNavigate = useNavigate();\n  const roomId = location.pathname.split(\"/\")[2];\n  // useEffect to initialize the Socket.io connection when the component mounts\n  useEffect(() => {\n    const init = async () => {\n      var _location$state;\n      // Initialize the Socket.io connection and store it in the ref\n      socketRef.current = await initSocket();\n      socketRef.current.on(\"connect_error\", err => handleErrors(err));\n      socketRef.current.on(\"connect_failed\", err => handleErrors(err));\n      function handleErrors(err) {\n        console.log(\"socket error\", err);\n        toast.error(\"Socket Connection Error, Please try again\");\n        reactNavigate(\"/start\");\n      }\n\n      // Emit a \"join\" event to the server\n      socketRef.current.emit(ACTIONS.JOIN, {\n        roomId,\n        userName: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.userName\n      });\n    };\n\n    // Call the init function when the component mounts\n    init();\n  }, []);\n\n  // State to hold the value of the code in the editor\n  const [value, setValue] = React.useState(\"print('Hello World')\");\n\n  // Callback function to handle changes in the code editor\n  const onChange = React.useCallback((val, viewUpdate) => {\n    // Log the changed value to the console\n    console.log(\"val:\", val);\n\n    // Update the state with the new value\n    setValue(val);\n  }, []);\n  if (!location.state) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render the CodeMirror component with Python language support\n  return /*#__PURE__*/_jsxDEV(CodeMirror, {\n    value: value,\n    height: \"200px\",\n    extensions: [python()],\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Editor, \"iDjs3p7/6UAvwtZGYZtH0IZrIiE=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["useEffect","useRef","React","CodeMirror","python","initSocket","ACTIONS","Navigate","useLocation","useNavigate","toast","jsxDEV","_jsxDEV","Editor","_s","socketRef","location","reactNavigate","roomId","pathname","split","init","_location$state","current","on","err","handleErrors","console","log","error","emit","JOIN","userName","state","value","setValue","useState","onChange","useCallback","val","viewUpdate","to","fileName","_jsxFileName","lineNumber","columnNumber","height","extensions","_c","$RefreshReg$"],"sources":["/Users/madhavgoswami/Coding/Projects/InkCode-Fusion/client/src/components/Editor.jsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport React from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { python } from \"@codemirror/lang-python\";\nimport { initSocket } from \"../socket\";\nimport ACTIONS from \"../Actions\";\nimport { Navigate, useLocation, useNavigate } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nconst Editor = () => {\n  // Ref to hold the Socket.io connection\n  const socketRef = useRef(null);\n  const location = useLocation();\n  const reactNavigate = useNavigate();\n  const roomId = location.pathname.split(\"/\")[2];\n  // useEffect to initialize the Socket.io connection when the component mounts\n  useEffect(() => {\n    const init = async () => {\n      // Initialize the Socket.io connection and store it in the ref\n      socketRef.current = await initSocket();\n      socketRef.current.on(\"connect_error\", (err) => handleErrors(err));\n      socketRef.current.on(\"connect_failed\", (err) => handleErrors(err));\n      function handleErrors(err) {\n        console.log(\"socket error\", err);\n        toast.error(\"Socket Connection Error, Please try again\");\n        reactNavigate(\"/start\");\n      }\n\n      // Emit a \"join\" event to the server\n      socketRef.current.emit(ACTIONS.JOIN, {\n        roomId,\n        userName: location.state?.userName,\n      });\n    };\n\n    // Call the init function when the component mounts\n    init();\n  }, []);\n\n  // State to hold the value of the code in the editor\n  const [value, setValue] = React.useState(\"print('Hello World')\");\n\n  // Callback function to handle changes in the code editor\n  const onChange = React.useCallback((val, viewUpdate) => {\n    // Log the changed value to the console\n    console.log(\"val:\", val);\n\n    // Update the state with the new value\n    setValue(val);\n  }, []);\n  if (!location.state) {\n    return <Navigate to=\"/start\" />;\n  }\n\n  // Render the CodeMirror component with Python language support\n  return (\n    <CodeMirror\n      value={value}\n      height=\"200px\"\n      extensions={[python()]}\n      onChange={onChange}\n    />\n  );\n};\n\nexport default Editor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}