{"ast":null,"code":"var _jsxFileName = \"/Users/madhavgoswami/Coding/Projects/InkCode-Fusion/client/src/components/Editor.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport React from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { python } from \"@codemirror/lang-python\";\nimport { initSocket } from \"../socket\";\nimport ACTIONS from \"../Actions\";\nimport { Navigate, useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Editor = () => {\n  _s();\n  var _location$state2;\n  // Ref to hold the Socket.io connection\n  const socketRef = useRef(null);\n\n  // React Router hooks for managing the route\n  const location = useLocation();\n  const reactNavigate = useNavigate();\n  const {\n    roomId\n  } = useParams();\n\n  // useEffect to initialize the Socket.io connection when the component mounts\n  useEffect(() => {\n    const init = async () => {\n      var _location$state;\n      // Initialize the Socket.io connection and store it in the ref\n      socketRef.current = await initSocket();\n\n      // Event listeners for Socket.io connection errors\n      socketRef.current.on(\"connect_error\", err => handleErrors(err));\n      socketRef.current.on(\"connect_failed\", err => handleErrors(err));\n      function handleErrors(err) {\n        console.log(\"socket error\", err);\n        toast.error(\"Socket Connection Error, Please try again\");\n\n        // Navigate to the \"/start\" route on connection error\n        reactNavigate(\"/start\");\n      }\n\n      // Emit a \"join\" event to the server\n      console.log(\"Emitting join event\");\n      socketRef.current.emit(ACTIONS.JOIN, {\n        roomId,\n        userName: (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.userName\n      });\n    };\n\n    // Call the init function when the component mounts\n    init();\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.off(\"connect_error\");\n        socketRef.current.off(\"connect_failed\");\n      }\n    };\n  }, [roomId, (_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.userName]);\n\n  // State to hold the value of the code in the editor\n  const [value, setValue] = React.useState(\"print('Hello World')\");\n\n  // Callback function to handle changes in the code editor\n  const onChange = React.useCallback((val, viewUpdate) => {\n    // Log the changed value to the console\n    console.log(\"val:\", val);\n\n    // Update the state with the new value\n    setValue(val);\n  }, []);\n\n  // Redirect to the \"/start\" route if location.state is not defined\n  if (!location.state) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render the CodeMirror component with Python language support\n  return /*#__PURE__*/_jsxDEV(CodeMirror, {\n    value: value,\n    height: \"200px\",\n    extensions: [python()],\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(Editor, \"/Mqt0kUJD0+f8b1DMpk4mbjCk8A=\", false, function () {\n  return [useLocation, useNavigate, useParams];\n});\n_c = Editor;\nexport default Editor;\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["useEffect","useRef","React","CodeMirror","python","initSocket","ACTIONS","Navigate","useLocation","useNavigate","useParams","toast","jsxDEV","_jsxDEV","Editor","_s","_location$state2","socketRef","location","reactNavigate","roomId","init","_location$state","current","on","err","handleErrors","console","log","error","emit","JOIN","userName","state","off","value","setValue","useState","onChange","useCallback","val","viewUpdate","to","fileName","_jsxFileName","lineNumber","columnNumber","height","extensions","_c","$RefreshReg$"],"sources":["/Users/madhavgoswami/Coding/Projects/InkCode-Fusion/client/src/components/Editor.jsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport React from \"react\";\nimport CodeMirror from \"@uiw/react-codemirror\";\nimport { python } from \"@codemirror/lang-python\";\nimport { initSocket } from \"../socket\";\nimport ACTIONS from \"../Actions\";\nimport {\n  Navigate,\n  useLocation,\n  useNavigate,\n  useParams,\n} from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\n\nconst Editor = () => {\n  // Ref to hold the Socket.io connection\n  const socketRef = useRef(null);\n\n  // React Router hooks for managing the route\n  const location = useLocation();\n\n  const reactNavigate = useNavigate();\n  const { roomId } = useParams();\n\n  // useEffect to initialize the Socket.io connection when the component mounts\n  useEffect(() => {\n    const init = async () => {\n      // Initialize the Socket.io connection and store it in the ref\n      socketRef.current = await initSocket();\n\n      // Event listeners for Socket.io connection errors\n      socketRef.current.on(\"connect_error\", (err) => handleErrors(err));\n      socketRef.current.on(\"connect_failed\", (err) => handleErrors(err));\n\n      function handleErrors(err) {\n        console.log(\"socket error\", err);\n        toast.error(\"Socket Connection Error, Please try again\");\n\n        // Navigate to the \"/start\" route on connection error\n        reactNavigate(\"/start\");\n      }\n\n      // Emit a \"join\" event to the server\n      console.log(\"Emitting join event\");\n      socketRef.current.emit(ACTIONS.JOIN, {\n        roomId,\n        userName: location.state?.userName,\n      });\n    };\n\n    // Call the init function when the component mounts\n    init();\n\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.off(\"connect_error\");\n        socketRef.current.off(\"connect_failed\");\n      }\n    };\n  }, [roomId, location.state?.userName]);\n\n  // State to hold the value of the code in the editor\n  const [value, setValue] = React.useState(\"print('Hello World')\");\n\n  // Callback function to handle changes in the code editor\n  const onChange = React.useCallback((val, viewUpdate) => {\n    // Log the changed value to the console\n    console.log(\"val:\", val);\n\n    // Update the state with the new value\n    setValue(val);\n  }, []);\n\n  // Redirect to the \"/start\" route if location.state is not defined\n  if (!location.state) {\n    return <Navigate to=\"/start\" />;\n  }\n\n  // Render the CodeMirror component with Python language support\n  return (\n    <CodeMirror\n      value={value}\n      height=\"200px\"\n      extensions={[python()]}\n      onChange={onChange}\n    />\n  );\n};\n\nexport default Editor;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}